import express from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import User from "../models/User.js";
import { verifyToken } from "../middleware/auth.js";

const router = express.Router();

// === C·∫•u h√¨nh Multer ƒë·ªÉ upload ·∫£nh ===
const uploadDir = "uploads/";
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `avatar_${Date.now()}${ext}`);
  },
});

const upload = multer({ storage });

// === L·∫•y danh s√°ch ng∆∞·ªùi d√πng ===
router.get("/", verifyToken, async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
  }
});

// === C·∫≠p nh·∫≠t avatar ho·∫∑c th√¥ng tin ng∆∞·ªùi d√πng ===
router.put("/:id", verifyToken, upload.single("avatar"), async (req, res) => {
  try {
    const { id } = req.params;
    const { name } = req.body;
    let avatarUrl;

    if (req.file) {
      avatarUrl = `/uploads/${req.file.filename}`;
    } else if (req.body.avatar) {
      avatarUrl = req.body.avatar;
    }

    // === C·∫≠p nh·∫≠t avatar ho·∫∑c th√¥ng tin ng∆∞·ªùi d√πng ===
    router.put(
      "/:id",
      verifyToken,
      upload.single("avatar"),
      async (req, res) => {
        try {
          const { id } = req.params;
          const { name } = req.body;

          // ‚úÖ Ghi log ƒë·ªÉ ki·ªÉm tra
          console.log("üß© PUT /api/users/:id body:", req.body);
          console.log("üß© req.file:", req.file);

          let avatarUrl = null;

          // N·∫øu c√≥ file upload th√¨ t·∫°o ƒë∆∞·ªùng d·∫´n public
          if (req.file) {
            avatarUrl = `/uploads/${req.file.filename}`;
          } else if (req.body.avatar) {
            avatarUrl = req.body.avatar; // cho ph√©p c·∫≠p nh·∫≠t b·∫±ng URL tr·ª±c ti·∫øp
          }

          // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
          const updateData = {};
          if (name) updateData.name = name;
          if (avatarUrl) updateData.avatar = avatarUrl;

          console.log("üß© updateData:", updateData);

          // N·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t
          if (Object.keys(updateData).length === 0) {
            return res
              .status(400)
              .json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t." });
          }

          const updatedUser = await User.findByIdAndUpdate(id, updateData, {
            new: true,
          });

          if (!updatedUser) {
            return res
              .status(404)
              .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
          }

          console.log("‚úÖ Avatar updated:", updatedUser.avatar);

          // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß, bao g·ªìm avatar
          res.json({
            success: true,
            avatar: updatedUser.avatar || null,
            user: updatedUser.toObject ? updatedUser.toObject() : updatedUser,
          });
        } catch (err) {
          console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", err);
          res
            .status(500)
            .json({ message: "L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin" });
        }
      }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    console.log("‚úÖ Avatar updated:", updatedUser.avatar);

    res.json({
      success: true,
      avatar: updatedUser.avatar,
      user: updatedUser.toObject ? updatedUser.toObject() : updatedUser,
    });
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t user:", err);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin" });
  }
});

export default router;
